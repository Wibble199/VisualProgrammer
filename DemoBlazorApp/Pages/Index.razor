@page "/"

<VisualProgrammer.Blazor.VisualProgramEditor Program="program" />

<button @onclick="Execute">Execute</button>
<button @onclick="Del">Del</button>

@code {
    static string testEntryId = "testentry";
    static Guid firstStatementGuid = Guid.NewGuid();
    static Guid printValueGuid = Guid.NewGuid();

    static VisualProgram program = new VisualProgram {
        EntryDefinitions = new Dictionary<string, EntryDefinition> {
            { testEntryId, new EntryDefinition {
                Name = "Test Entry",
                Parameters = new VisualProgrammer.Core.Utils.IndexedDictionary<string, Type> {
                    { "someDouble", typeof(double) }
                }
            } }
        },

        variableDefinitions = new Dictionary<string, (Type type, object @default)> {
            { "doubleVar", (typeof(double), 0) }
        },

        Nodes = new Dictionary<Guid, VisualNode> {
            { Guid.NewGuid(), new VisualEntry(testEntryId) {
                ParameterMap = new Dictionary<string, string> { { "someDouble", "doubleVar" } }, // Map the "someInt" parameter onto the "intVar" variable
                FirstStatement = new StatementReference(firstStatementGuid),
                Position = new System.Drawing.Point(100, 0) }
            },
            { firstStatementGuid, new VisualProgrammer.Core.Nodes.Debug.Print { PrintValue = new ExpressionReference<string>(printValueGuid), Position = new System.Drawing.Point(100, 100) } },
            { printValueGuid, new VisualProgrammer.Core.Nodes.Variables.Literal<string> { Value = "Hello world!", Position = new System.Drawing.Point(0, 100) } },
            { Guid.NewGuid(), new VisualProgrammer.Core.Nodes.Variables.SetVariable<double> { Variable = new VariableReference<double>("doubleVar") } },
            { Guid.NewGuid(), new VisualProgrammer.Core.Nodes.Variables.GetVariable<double> { Variable = new VariableReference<double>("doubleVar") } },
            { Guid.NewGuid(), new VisualProgrammer.Core.Nodes.Variables.Literal<double> { Value = 0 } },
            { Guid.NewGuid(), new VisualProgrammer.Core.Nodes.Variables.Literal<double> { Value = -1 } },
            { Guid.NewGuid(), new VisualProgrammer.Core.Nodes.Maths.Comparison { SelectedOp = VisualProgrammer.Core.Nodes.Maths.Comparison.Op.GT } }
        }
    };

    void Execute() {
        // Compiles all the entries as delegates and adds them to a dictionary with their entryId (NOT THEIR NAME) as the key
        var delegates = program.Compile();

        // Since our entry has 1 parameter (an int), it is an Action<int>
        var testEntry = (Action<double>)delegates[testEntryId];

        testEntry.Invoke(5d);
    }

    void Del()
    {
        program.RemoveVariable("doubleVar");
    }
}