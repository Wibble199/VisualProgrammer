@* Though not technically a statement, an entry acts similar to one in terms of link connection, so the link type is set as a statement. *@
<div class="vp--visual-node vp--visual-statment vp--visual-entry" data-visual-node-id="@EntryId">
    <div class="vp--node-dragger"></div>
    <span class="vp--node-title">@Definition.Name</span>

    @* A list of all parameters and their mappings for this entry *@
    <div class="vp--node-properties">
        @foreach (var param in Definition.Parameters) {
            Entry.ParameterMap.TryGetValue(param.Key, out var varName);

            <div>
                @param.Key
                &rarr;
                <select @onchange="e => Entry.ParameterMap[param.Key] = (string)e.Value">
                    <option value="@string.Empty">&mdash; None &mdash;</option>
                    @foreach (var variableDef in Context.VariableDefinitions.Where(d => d.Value.Type == Definition.Parameters[param.Key])) {
                        <option value="@variableDef.Key" selected="@(variableDef.Key == varName)">@variableDef.Key</option>
                    }
                </select>
            </div>
        }
    </div>

    @* Connector for the first statement of this entry point *@
    <div class="vp--node-statements">
        <div>
            Start
            <div class="vp--node-link" data-node-link-type="statement" data-node-link-role="source" data-node-link-name="FirstStatement"></div>
        </div>
    </div>

</div>

@code {
    [Parameter] public VisualEntry Entry { get; set; }
    [Parameter] public Guid EntryId { get; set; }
    [CascadingParameter] public VisualProgram Context { get; set; }
    EntryDefinition Definition => Context.Environment.EntryDefinitions[Entry.VisualEntryId];
}
