<div class="vp--node-properties">
    @foreach (var prop in Properties) {
        <div class="vp--node-property">
            @prop.DisplayName

            @if (prop.PropertyType == VisualNodePropertyType.Expression) {
                <div class="vp--node-link" data-node-link-type="expression" data-node-link-role="source" data-node-link-name="@prop.Name" data-type="@prop.PropertyDataType.Name.ToLower()"></div>
            } else if (prop.PropertyType == VisualNodePropertyType.Variable) {
                <InputFieldDynamic InputType="prop.RawType" Value="Node.GetPropertyValue(prop.Name)" ValueChanged="newVal => Node.SetPropertyValue(prop.Name, newVal)" />
            } else {
                <InputFieldDynamic InputType="prop.PropertyDataType" Value="Node.GetPropertyValue(prop.Name)" ValueChanged="newVal => Node.SetPropertyValue(prop.Name, newVal)" />
            }
        </div>
    }
</div>

@code {
    [Parameter] public IVisualNode Node { get; set; }

    /// <summary>Gets an enumerable for all the editable properties of the assigned node.</summary>
    IOrderedEnumerable<VisualNodePropertyDefinition> Properties => Node.GetPropertiesOfTypes(VisualNodePropertyType.Expression, VisualNodePropertyType.Value, VisualNodePropertyType.Variable)
        .OrderBy(p => p.Meta.Order)
        .ThenBy(p => p.DisplayName);
}
