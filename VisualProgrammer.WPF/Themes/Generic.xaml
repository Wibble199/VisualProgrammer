<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:VisualProgrammer.WPF"
	xmlns:pe="clr-namespace:VisualProgrammer.WPF.PropertyEditor"
    xmlns:if="clr-namespace:VisualProgrammer.WPF.InputField"
	xmlns:u="clr-namespace:VisualProgrammer.WPF.Util"
    xmlns:vpcore="clr-namespace:VisualProgrammer.Core;assembly=VisualProgrammer.Core">

    <pe:NodeToPropertyListConverter x:Key="{ComponentResourceKey {x:Type pe:MultiEditor}, NodeToPropertyListConverter}" />
	<u:TypeIsConverter x:Key="{ComponentResourceKey {x:Type pe:MultiEditor}, TypeIsConverter}" />
	<local:VisualNodePropertyListConverter x:Key="{ComponentResourceKey {x:Type pe:MultiEditor}, VisualNodePropertyListConverter}" />
	<u:EnumerableIndexConverter x:Key="{ComponentResourceKey {x:Type pe:MultiEditor}, EnumerableIndexConverter}" />
	<u:EnumerableCountConverter x:Key="{ComponentResourceKey {x:Type pe:MultiEditor}, EnumerableCountConverter}" />

	<Style TargetType="{x:Type local:VisualProgramEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:VisualProgramEditor}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <local:VisualNodeCanvas Program="{Binding Program, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:VisualProgramEditor}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:VisualNodeCanvas}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="ItemsSource" Value="{Binding Program.Nodes, RelativeSource={RelativeSource Mode=Self}}" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
					<local:VisualNodePresenter />
				</DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Canvas />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Canvas.Left" Value="{Binding Path=Value.Position.X, Mode=OneWay}" />
                    <Setter Property="Canvas.Top" Value="{Binding Path=Value.Position.Y, Mode=OneWay}" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:VisualNodePresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:VisualNodePresenter}">
					<Border Background="#FFF" BorderBrush="#26000000" BorderThickness="1" CornerRadius="4">
						<Grid>
							<!-- Main node content -->
							<StackPanel Orientation="Vertical" Margin="5,5,10,0">
								<!-- Title -->
								<TextBlock Text="Node Name" FontWeight="Bold" />
								
								<!-- Properties list -->
								<pe:MultiEditor Node="{Binding .}" Margin="0,8" />
								
								<!-- Output statements -->
								<ItemsControl ItemsSource="{Binding Value, Converter={StaticResource {ComponentResourceKey {x:Type pe:MultiEditor}, VisualNodePropertyListConverter}}, ConverterParameter={x:Static vpcore:VisualNodePropertyType.Statement}}" Margin="0,0,0,-8">
									<ItemsControl.ItemTemplate>
										<ItemContainerTemplate>
											<StackPanel>
												<TextBlock Text="{Binding Path=DisplayName, Mode=OneWay}" HorizontalAlignment="Center" />
												<local:VisualNodeConnector Node="{Binding Path=DataContext.Value, RelativeSource={RelativeSource AncestorType={x:Type local:VisualNodePresenter}}, Mode=OneWay}"
																		   NodeID="{Binding Path=DataContext.Key, RelativeSource={RelativeSource AncestorType={x:Type local:VisualNodePresenter}}, Mode=OneWay}"
																		   PropertyName="{Binding Name, Mode=OneWay}" ConnectorFlow="Destination" HorizontalAlignment="Center" />
											</StackPanel>
										</ItemContainerTemplate>
									</ItemsControl.ItemTemplate>

									<ItemsControl.ItemsPanel>
										<ItemsPanelTemplate>
											<!-- Using a grid for each of the output statements since we want each one to take up an even amount of space and also use up the total room available (so StackPanels, DockPanels, etc. are unsuitable). -->
											<!-- Using a custom AttachedProperty on the Grid so that we can set the ColumnDefinitions property based on a number instead, the number being the total number of statement properties. -->
											<Grid local:GridColumnCountHelper.ColumnCount="{Binding ItemsSource, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Converter={StaticResource {ComponentResourceKey {x:Type pe:MultiEditor}, EnumerableCountConverter}}}" />
										</ItemsPanelTemplate>
									</ItemsControl.ItemsPanel>

									<ItemsControl.ItemContainerStyle>
										<Style>
											<!-- Bind the Grid.Colummn to the index of the item in the Statement property list. -->
											<Setter Property="Grid.Column">
												<Setter.Value>
													<!-- This EnumerableIndexConverter takes 2 parameters - [0] = an IEnumerable, [1] = an item - and returns the index of the item in the IEnumerable -->
													<MultiBinding Converter="{StaticResource {ComponentResourceKey {x:Type pe:MultiEditor}, EnumerableIndexConverter}}">
														<!-- [0] We pass in the ItemsSource of the parent ItemsControl (this is the statement property list) to be the IEnumerable -->
														<Binding Path="ItemsSource" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}" />
														<!-- [1] We pass in the current DataContext as our item to search for. -->
														<Binding />
													</MultiBinding>
												</Setter.Value>
											</Setter>
										</Style>
									</ItemsControl.ItemContainerStyle>
								</ItemsControl>
							</StackPanel>

							<!-- Expression output & statement input connector -->
							<local:VisualNodeConnector Node="{Binding Value, Mode=OneWay}" NodeID="{Binding Key, Mode=OneWay}" ConnectorFlow="Source" VerticalAlignment="Top">
								<local:VisualNodeConnector.Style>
									<Style TargetType="{x:Type local:VisualNodeConnector}">
										<Setter Property="Visibility" Value="Collapsed" />
										<Style.Triggers>
											<!-- For expressions -->
											<DataTrigger Binding="{Binding Value, Converter={StaticResource {ComponentResourceKey {x:Type pe:MultiEditor}, TypeIsConverter}}, ConverterParameter={x:Type vpcore:IVisualExpression}}" Value="True">
												<Setter Property="Visibility" Value="Visible" />
												<Setter Property="HorizontalAlignment" Value="Right" />
												<Setter Property="Margin" Value="0,5,-7,0" />
											</DataTrigger>
											<!-- For statements -->
											<DataTrigger Binding="{Binding Value, Converter={StaticResource {ComponentResourceKey {x:Type pe:MultiEditor}, TypeIsConverter}}, ConverterParameter={x:Type vpcore:VisualStatement}}" Value="True">
												<Setter Property="Visibility" Value="Visible" />
												<Setter Property="HorizontalAlignment" Value="Center" />
												<Setter Property="Margin" Value="0,-8,0,0" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</local:VisualNodeConnector.Style>
							</local:VisualNodeConnector>
						</Grid>

						<Border.Effect>
							<DropShadowEffect Color="#999" BlurRadius="8" Direction="0" ShadowDepth="1" />
						</Border.Effect>
					</Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type if:InputFieldDynamic}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type if:InputFieldDynamic}">
					<TextBox Text="{Binding Value, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type if:InputFieldDynamic}}}" />
				</ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

	<Style TargetType="{x:Type pe:MultiEditor}" BasedOn="{StaticResource {x:Type ItemsControl}}">
		<Setter Property="ItemsSource" Value="{Binding Path=Node, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource {ComponentResourceKey {x:Type pe:MultiEditor}, NodeToPropertyListConverter}}}" />
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<ItemContainerTemplate>
					<StackPanel>
						<TextBlock Text="{Binding Path=Definition.DisplayName}" HorizontalAlignment="Left" />
						<pe:SingleEditor />
					</StackPanel>
				</ItemContainerTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type pe:SingleEditor}">
		<!-- Conditionally choose template based on field type -->
		<Style.Triggers>
			<!-- Template for Expression references -->
			<!-- Is there a cleaner way of doing this? Probably, but idk how -->
			<DataTrigger Binding="{Binding Path=Definition.PropertyType}" Value="{x:Static vpcore:VisualNodePropertyType.Expression}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate>
							<pe:ExpressionEditor />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</DataTrigger>

			<!-- Template for Variable references -->
			<DataTrigger Binding="{Binding Path=Definition.PropertyType}" Value="{x:Static vpcore:VisualNodePropertyType.Variable}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate>
							<pe:VariableEditor />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</DataTrigger>

			<!-- Template for raw values -->
			<DataTrigger Binding="{Binding Path=Definition.PropertyType}" Value="{x:Static vpcore:VisualNodePropertyType.Value}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate>
							<pe:ValueEditor />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</DataTrigger>
		</Style.Triggers>
	</Style>

    <Style TargetType="{x:Type pe:ValueEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pe:ValueEditor}">
					<if:InputFieldDynamic Value="{Binding Value, Mode=TwoWay}" />
				</ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type pe:ExpressionEditor}">
        <Setter Property="Template">
            <Setter.Value>
				<ControlTemplate TargetType="{x:Type pe:ExpressionEditor}">
					<local:VisualNodeConnector Node="{Binding Node, Mode=OneWay}" NodeID="{Binding NodeId, Mode=OneWay}" PropertyName="{Binding Path=Definition.Name, Mode=OneWay}" ConnectorFlow="Destination"  HorizontalAlignment="Left" Margin="-12,0,0,0" />
				</ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type pe:VariableEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pe:VariableEditor}">
					<TextBlock>
						<Run Text="Expected type:" FontWeight="Bold" />
						<Run Text="{Binding Path=Definition.PropertyDataType.Name, Mode=OneWay}" />
					</TextBlock>
				</ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:VisualNodeConnector}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:VisualNodeConnector}">
					<Grid Cursor="Cross">
						<Ellipse Width="14" Height="14" Fill="#FFF" />
						<Ellipse Width="7" Height="7" Fill="#4000" />
					</Grid>
				</ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
