@page "/"
@inject IJSRuntime JsRuntime

<VisualProgramEditor Program="program" />

<button class="execute-button" @onclick="Execute">Execute</button>

@code {
    static string testEntryId = "testentry";

    static VisualProgram program = new VisualProgram {
        EntryDefinitions = new Dictionary<string, EntryDefinition> {
            { testEntryId, new EntryDefinition {
                Name = "Test Entry",
                Parameters = new VisualProgrammer.Core.Utils.IndexedDictionary<string, Type> {
                    { "someDouble", typeof(double) }
                }
            } }
        },

        variableDefinitions = new Dictionary<string, (Type type, object @default)> {
            { "doubleVar", (typeof(double), 0d) }
        },

        Nodes = new Dictionary<Guid, VisualNode> {
            { Guid.NewGuid(), new VisualEntry(testEntryId) {
                ParameterMap = new Dictionary<string, string> { { "someDouble", "doubleVar" } }, // Map the "someInt" parameter onto the "intVar" variable
                Position = new System.Drawing.Point(100, 10) }
            },
        }
    };

    void Execute() {
        // Compiles all the entries as delegates and adds them to a dictionary with their entryId (NOT THEIR NAME) as the key
        var delegates = program.Compile();

        program.ResetVariables();

        // Since our entry has 1 parameter (an int), it is an Action<int>
        var testEntry = (Action<double>)delegates[testEntryId];

        testEntry.Invoke(5d);
    }



    // Get a reference to the instance of the Index (so we can access the log method)
    internal static Index instance;
    protected override void OnInitialized() => instance = this;

    // Logs a value to the web console
    public void ConsoleLog(string value) {
        JsRuntime.InvokeVoidAsync("console.log", value);
    }

    // Custom node that prints to the web console
    public class PrintToWebConsole : VisualStatement {

        [VisualNodeProperty] public ExpressionReference<string> Value { get; set; }

        public override Expression CreateExpression(VisualProgram context) => Expression.Call(
            instance: Expression.Constant(Index.instance),
            method: Index.instance.GetType().GetMethod(nameof(Index.ConsoleLog)),
            Value.ResolveExpression(context)
        );
    }
}