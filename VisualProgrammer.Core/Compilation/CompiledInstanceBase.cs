using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;

namespace VisualProgrammer.Core.Compilation {

	/// <summary>
	/// A base class that the program instances generated by compilation will inherit.
	/// </summary>
	public abstract class CompiledInstanceBase : DynamicObject, IAnonymousProgram {

		// The delegates for each of the compiled functions
		private readonly Dictionary<string, Delegate> functions;

		protected CompiledInstanceBase(Dictionary<string, Delegate> functions) {
			this.functions = new Dictionary<string, Delegate>(functions ?? new Dictionary<string, Delegate>(), StringComparer.InvariantCultureIgnoreCase);
		}

		/// <summary>Invokes the target delegate method with the given arguments.</summary>
		/// <param name="name">The name of the function to execute</param>
		/// <param name="args">The arguments passed to the compiled delegate.</param>
		/// <returns><c>true</c> if the function was invoked, <c>false</c> if no delegate was found.</returns>
		protected internal bool ExecuteFunction(string name, object[] args) {
			if (!functions.TryGetValue(name, out var @delegate))
				return false;
			@delegate.DynamicInvoke(args);
			return true;
		}

		/// <inheritdoc />
		public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object? result) {
			result = null; // The functions can't (currently, atleast) return anything
			return ExecuteFunction(binder.Name, args);
		}
	}
}
