<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:VisualProgrammer.WPF"
	xmlns:pe="clr-namespace:VisualProgrammer.WPF.PropertyEditor"
    xmlns:if="clr-namespace:VisualProgrammer.WPF.InputField"
	xmlns:u="clr-namespace:VisualProgrammer.WPF.Util"
    xmlns:vpcore="clr-namespace:VisualProgrammer.Core;assembly=VisualProgrammer.Core">

    <pe:NodeToPropertyListConverter x:Key="{ComponentResourceKey {x:Type pe:MultiEditor}, NodeToPropertyListConverter}" />
	<u:TypeIsConverter x:Key="{ComponentResourceKey {x:Type pe:MultiEditor}, TypeIsConverter}" />

	<Style TargetType="{x:Type local:VisualProgramEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:VisualProgramEditor}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <local:VisualNodeCanvas Program="{Binding Program, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:VisualProgramEditor}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:VisualNodeCanvas}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="ItemsSource" Value="{Binding Program.Nodes, RelativeSource={RelativeSource Mode=Self}}" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
					<local:VisualNodePresenter />
				</DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Canvas />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Canvas.Left" Value="{Binding Path=Value.Position.X, Mode=OneWay}" />
                    <Setter Property="Canvas.Top" Value="{Binding Path=Value.Position.Y, Mode=OneWay}" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:VisualNodePresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:VisualNodePresenter}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<Grid>
							<StackPanel Orientation="Vertical" Background="LightGray">
								<TextBlock Text="{Binding Key}" />
								<pe:MultiEditor Node="{Binding .}" />
							</StackPanel>
							<Ellipse x:Name="PART_ExpressionReturnConnector" Fill="Green" Width="10" Height="10" VerticalAlignment="Top" HorizontalAlignment="Center">
								<Ellipse.Style>
									<Style TargetType="{x:Type Ellipse}">
										<Setter Property="Visibility" Value="Collapsed" />
										<Style.Triggers>
											<DataTrigger Binding="{Binding Value, Converter={StaticResource {ComponentResourceKey {x:Type pe:MultiEditor}, TypeIsConverter}}, ConverterParameter={x:Type vpcore:IVisualExpression}}" Value="True">
												<Setter Property="Visibility" Value="Visible" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Ellipse.Style>
							</Ellipse>
						</Grid>
					</Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type if:InputFieldDynamic}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type if:InputFieldDynamic}">
					<TextBox Text="{Binding Value, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type if:InputFieldDynamic}}}" />
				</ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

	<Style TargetType="{x:Type pe:MultiEditor}" BasedOn="{StaticResource {x:Type ItemsControl}}">
		<Setter Property="ItemsSource" Value="{Binding Path=Node, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource {ComponentResourceKey {x:Type pe:MultiEditor}, NodeToPropertyListConverter}}}" />
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<ItemContainerTemplate>
					<StackPanel>
						<TextBlock Text="{Binding Path=Definition.DisplayName}" HorizontalAlignment="Left" />
						<pe:SingleEditor />
					</StackPanel>
				</ItemContainerTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type pe:SingleEditor}">
		<!-- Conditionally choose template based on field type -->
		<Style.Triggers>
			<!-- Template for Expression references -->
			<!-- Is there a cleaner way of doing this? Probably, but idk how -->
			<DataTrigger Binding="{Binding Path=Definition.PropertyType}" Value="{x:Static vpcore:VisualNodePropertyType.Expression}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate>
							<pe:ExpressionEditor />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</DataTrigger>

			<!-- Template for Variable references -->
			<DataTrigger Binding="{Binding Path=Definition.PropertyType}" Value="{x:Static vpcore:VisualNodePropertyType.Variable}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate>
							<pe:VariableEditor />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</DataTrigger>

			<!-- Template for raw values -->
			<DataTrigger Binding="{Binding Path=Definition.PropertyType}" Value="{x:Static vpcore:VisualNodePropertyType.Value}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate>
							<pe:ValueEditor />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</DataTrigger>
		</Style.Triggers>
	</Style>

    <Style TargetType="{x:Type pe:ValueEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pe:ValueEditor}">
					<if:InputFieldDynamic Value="{Binding Value, Mode=TwoWay}" />
				</ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type pe:ExpressionEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pe:ExpressionEditor}">
					<Grid>
						<Ellipse x:Name="PART_ExpressionConnector" HorizontalAlignment="Left" Width="10" Height="10" Fill="Red" />
					</Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type pe:VariableEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pe:VariableEditor}">
					<TextBlock>
						<Run Text="Expected type:" FontWeight="Bold" />
						<Run Text="{Binding Path=Definition.PropertyDataType.Name, Mode=OneWay}" />
					</TextBlock>
				</ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
